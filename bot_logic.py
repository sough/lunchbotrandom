# bot_logic.py
import logging
import os
import random
import requests
import asyncio
import traceback
import html
import json
from datetime import time
from zoneinfo import ZoneInfo, ZoneInfoNotFoundError

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    CallbackContext, CallbackQueryHandler, ConversationHandler, PicklePersistence
)
from timezonefinder import TimezoneFinder

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)
DEFAULT_RADIUS_KM = 1.0
ASKING_RADIUS = 1

# ... (all other functions from escape_markdown_v2 to cancel remain the same) ...
def escape_markdown_v2(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'; return text.translate(str.maketrans({char: f'\\{char}' for char in escape_chars}))
async def get_coordinates_and_timezone(address: str) -> tuple | None:
    url = "https://catalog.api.2gis.com/3.0/items/geocode"; params = { "q": address, "key": os.getenv("DGIS_API_KEY"), "fields": "items.point" }
    try:
        response = requests.get(url, params=params); response.raise_for_status(); data = response.json()
        if data.get("meta", {}).get("code") == 200 and data.get("result", {}).get("items"):
            point = data["result"]["items"][0]["point"]; lat, lon = point['lat'], point['lon']; timezone_str = TimezoneFinder().timezone_at(lng=lon, lat=lat)
            if not timezone_str: logger.warning(f"–ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è '{address}', –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å."); return lat, lon, None
            return lat, lon, timezone_str
        else: logger.warning(f"2GIS API –Ω–µ –Ω–∞—à–µ–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∞–¥—Ä–µ—Å–∞ '{address}'. –û—Ç–≤–µ—Ç: {data}"); return None
    except requests.RequestException as e: logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ 2GIS Geocode API –¥–ª—è –∞–¥—Ä–µ—Å–∞ '{address}': {e}"); return None
async def get_random_lunch_place(lat: float, lon: float, radius_meters: int) -> dict | None:
    all_places = []
    for page_num in range(1, 11):
        url = "https://catalog.api.2gis.com/3.0/items"; params = {'key': os.getenv("DGIS_API_KEY"), 'q': "–∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω, —Å—Ç–æ–ª–æ–≤–∞—è", 'point': f'{lon},{lat}', 'radius': radius_meters, 'type': 'branch', 'fields': 'items.name,items.address_name,items.url', 'page_size': 10, 'page': page_num}
        try:
            response = requests.get(url, params=params); response.raise_for_status(); data = response.json()
            if data.get("meta", {}).get("code") == 200 and data.get("result", {}).get("items"): all_places.extend(data["result"]["items"])
            else: break
        except requests.RequestException: break
        except (KeyError, IndexError): break
    if all_places:
        place_choice = random.choice(all_places)
        return {"name": place_choice.get("name", "–ù/–î"), "address": place_choice.get("address_name", "–ù/–î"), "url": place_choice.get("url", "")}
    return None
def create_result_keyboard() -> InlineKeyboardMarkup:
    keyboard = [[InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫ üîÅ", callback_data="repeat_search"), InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å üìè", callback_data="change_radius")]]; return InlineKeyboardMarkup(keyboard)
async def perform_search_and_reply(update: Update, context: CallbackContext, coords: tuple, is_new_search: bool = False):
    radius_km = context.user_data.get('radius_km', DEFAULT_RADIUS_KM); radius_meters = int(radius_km * 1000)
    place = await get_random_lunch_place(coords[0], coords[1], radius_meters)
    if not place:
        message_text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∑–∞–≤–µ–¥–µ–Ω–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ {radius_km} –∫–º."
        if update.callback_query: await update.callback_query.edit_message_text(text=message_text)
        elif update.message: await update.message.reply_text(text=message_text)
        return
    title = "üéâ *–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω\\!* üéâ" if is_new_search else "üéâ *–ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\\!* üéâ"; name = escape_markdown_v2(place['name']); address = escape_markdown_v2(place['address'])
    message_text = f"{title}\n\nüìç *–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\nüè† *–ê–¥—Ä–µ—Å:* {address}\n\n"
    if place.get('url'): message_text += f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ 2GIS]({place['url']})"
    reply_markup = create_result_keyboard()
    if update.callback_query: await update.callback_query.edit_message_text(text=message_text, parse_mode='MarkdownV2', reply_markup=reply_markup)
    elif update.message: await update.message.reply_markdown_v2(message_text, reply_markup=reply_markup)
async def daily_prompt_callback(context: CallbackContext) -> None:
    job = context.job; keyboard = [[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ üîé", callback_data="start_daily_search")]]; reply_markup = InlineKeyboardMarkup(keyboard)
    logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞–¥–∞—á–∞ '{job.name}', –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {job.chat_id}.")
    await context.bot.send_message(job.chat_id, text="–ì–¥–µ –æ–±–µ–¥–∞–µ–º —Å–µ–≥–æ–¥–Ω—è?", reply_markup=reply_markup)
def remove_job_if_exists(name: str, context: CallbackContext) -> bool:
    current_jobs = context.job_queue.get_jobs_by_name(name)
    if not current_jobs: return False
    for job in current_jobs: job.schedule_removal()
    return True
async def schedule_daily_prompt(update: Update, context: CallbackContext) -> None:
    chat_id = update.effective_message.chat_id; user_id = update.effective_user.id; job_name = f"daily_lunch_prompt_{user_id}"
    remove_job_if_exists(job_name, context)
    timezone_str = context.user_data.get('timezone')
    if not timezone_str: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è user_id {user_id}, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å."); return
    try:
        tz = ZoneInfo(timezone_str); t = time(11, 30, 0, tzinfo=tz)
        context.job_queue.run_daily(daily_prompt_callback, t, chat_id=chat_id, name=job_name, user_id=user_id)
        logger.info(f"–ó–∞–¥–∞—á–∞ '{job_name}' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 11:30 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ {timezone_str}.")
        await update.effective_message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ–± –æ–±–µ–¥–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 11:30.")
    except ZoneInfoNotFoundError: logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_str}"); await update.effective_message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user; current_radius = context.user_data.get('radius_km', DEFAULT_RADIUS_KM)
    start_message = (f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å, –≥–¥–µ –ø–æ–æ–±–µ–¥–∞—Ç—å.\n"
                     f"–¢–µ–∫—É—â–∏–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞: <b>{current_radius} –∫–º</b>. –ß—Ç–æ–±—ã –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /radius.\n\n")
    if 'city' in context.user_data: city = context.user_data['city']; start_message += f"–í–∞—à –≥–æ—Ä–æ–¥: <b>{city}</b>. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞."
    else: start_message += "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥."
    await update.message.reply_html(start_message)
async def set_city(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id; job_name = f"daily_lunch_prompt_{user_id}"
    if remove_job_if_exists(job_name, context):
        logger.info(f"–ó–∞–¥–∞—á–∞ '{job_name}' –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞."); await update.message.reply_text("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.pop('city', None); context.user_data.pop('last_coords', None); context.user_data.pop('timezone', None)
    await update.message.reply_text("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ —Å–º–µ–Ω–∏–º –≥–æ—Ä–æ–¥. –ö–∞–∫–æ–π —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º?")
async def handle_message(update: Update, context: CallbackContext) -> None:
    user_text = update.message.text
    if 'city' not in context.user_data:
        geo_data = await get_coordinates_and_timezone(user_text)
        if not geo_data: await update.message.reply_text("–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."); return
        lat, lon, timezone_str = geo_data; context.user_data['city'] = user_text; context.user_data['timezone'] = timezone_str
        escaped_city = escape_markdown_v2(user_text)
        await update.message.reply_markdown_v2(f"–û—Ç–ª–∏—á–Ω–æ\\! –í–∞—à –≥–æ—Ä–æ–¥ '{escaped_city}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω\\.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞ \\(–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê–±–∞—è 15'\\)\\.")
        await schedule_daily_prompt(update, context)
        return
    city = context.user_data['city']; full_address = f"{city}, {user_text}"; escaped_full_address = escape_markdown_v2(full_address)
    await update.message.reply_markdown_v2(f"–ò—â—É –∑–∞–≤–µ–¥–µ–Ω–∏—è —Ä—è–¥–æ–º —Å –∞–¥—Ä–µ—Å–æ–º: *{escaped_full_address}*\\.\\.\\.\n_\\(–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\\)_")
    coords_data = await get_coordinates_and_timezone(full_address)
    if not coords_data: await update.message.reply_text("–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –∞–¥—Ä–µ—Å."); return
    lat, lon, _ = coords_data; coords = (lat, lon); context.user_data['last_coords'] = coords
    await perform_search_and_reply(update, context, coords, is_new_search=True)
async def start_daily_search_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query; await query.answer()
    await query.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê–±–∞—è 15').")
async def button_handler(update: Update, context: CallbackContext) -> int:
    query = update.callback_query; await query.answer()
    if query.data == "repeat_search":
        coords = context.user_data.get('last_coords')
        if not coords: await query.edit_message_text(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–Ω–æ–≤–æ."); return
        await query.edit_message_text(text="_–ò—â—É –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç\\.\\.\\._", parse_mode='MarkdownV2')
        await perform_search_and_reply(update, context, coords)
        return
    elif query.data == "change_radius":
        current_radius = context.user_data.get('radius_km', DEFAULT_RADIUS_KM)
        await query.message.reply_text(f"–¢–µ–∫—É—â–∏–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞: {current_radius} –∫–º.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5 –∏–ª–∏ 3).\n\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel.")
        return ASKING_RADIUS
async def radius_start(update: Update, context: CallbackContext) -> int:
    current_radius = context.user_data.get('radius_km', DEFAULT_RADIUS_KM); await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞: {current_radius} –∫–º.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5 –∏–ª–∏ 3).\n\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel."); return ASKING_RADIUS
async def radius_receive(update: Update, context: CallbackContext) -> int:
    user_text = update.message.text.replace(',', '.');
    try:
        new_radius = float(user_text)
        if not (0.1 <= new_radius <= 10): raise ValueError("–†–∞–¥–∏—É—Å –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        context.user_data['radius_km'] = new_radius
        coords = context.user_data.get('last_coords')
        if coords: await update.message.reply_text(f"–†–∞–¥–∏—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {new_radius} –∫–º. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—é –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫..."); await perform_search_and_reply(update, context, coords, is_new_search=True)
        else: await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ! –ù–æ–≤—ã–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {new_radius} –∫–º.")
    except ValueError: await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 0.1 –¥–æ 10)."); return ASKING_RADIUS
    return ConversationHandler.END
async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."); return ConversationHandler.END

async def error_handler(update: object, context: CallbackContext) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏, –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)

    # –°–æ–±–∏—Ä–∞–µ–º traceback –æ—à–∏–±–∫–∏
    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = "".join(tb_list)

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —á–∞—Ç–µ
    update_str = update.to_json() if isinstance(update, Update) else str(update)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞
    # –ú—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º html.escape, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –æ—Ç—Å—Ç—É–ø—ã
    message = (
        f"--- –ù–∞—á–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ ---\n"
        f"Update: {json.dumps(json.loads(update_str), indent=2, ensure_ascii=False)}\n\n"
        f"User Data: {context.user_data}\n\n"
        f"Traceback:\n{tb_string}"
        f"--- –ö–æ–Ω–µ—Ü –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ ---"
    )

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –æ–¥–Ω—É –±–æ–ª—å—à—É—é –∑–∞–ø–∏—Å—å
    logger.error(message)


def setup_application(persistence: PicklePersistence) -> Application:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Application."""
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
    
    application = (
        Application.builder()
        .token(TELEGRAM_TOKEN)
        .persistence(persistence)
        .build()
    )

    application.add_error_handler(error_handler)

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('radius', radius_start)],
        states={
            ASKING_RADIUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, radius_receive)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=False,
        persistent=True,
        name="radius_conversation"
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("setcity", set_city))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CallbackQueryHandler(start_daily_search_handler, pattern='^start_daily_search$'))
    
    return application